import l from"./DatabaseService-IbC6Bkt9.js";import{L as f,M as u}from"./index-zLCb2fgV.js";class y{constructor(){this.isOnline=!0,this.listeners=[],this.initialize()}initialize(){this.checkConnection(),window.addEventListener("online",()=>this.handleConnectionChange(!0)),window.addEventListener("offline",()=>this.handleConnectionChange(!1)),setInterval(()=>this.checkConnection(),3e4)}async checkConnection(){try{const e=await f();this.isOnline!==e&&this.handleConnectionChange(e)}catch(e){console.error("Failed to check online status:",e)}}handleConnectionChange(e){const t=this.isOnline;this.isOnline=e,t!==e&&(this.notifyListeners(),console.log(`Connection status changed: ${e?"Online":"Offline"}`))}addListener(e){return typeof e=="function"&&!this.listeners.includes(e)?(this.listeners.push(e),e(this.isOnline),!0):!1}removeListener(e){const t=this.listeners.indexOf(e);return t!==-1?(this.listeners.splice(t,1),!0):!1}notifyListeners(){this.listeners.forEach(e=>{try{e(this.isOnline)}catch(t){console.error("Error in network status listener:",t)}})}getStatus(){return this.isOnline}}const h=new y,g=(c,e)=>{if(!c||!e)return!1;if(c.updatedAt&&e.updatedAt){const t=new Date(c.updatedAt);return new Date(e.updatedAt)>t}return!0},m=(c,e,t="smart")=>{if(!c)return e;if(!e)return c;switch(t){case"local":return{...e,...c,syncStatus:"pending"};case"server":return{...e,syncStatus:"synced"};case"smart":default:const s={...e};return Object.keys(c).forEach(n=>{["_id","id","createdAt","syncStatus"].includes(n)||JSON.stringify(c[n])!==JSON.stringify(e[n])&&["name","description","price","billAmount"].includes(n)&&(s[n]=c[n])}),s.syncStatus=JSON.stringify(s)!==JSON.stringify(e)?"pending":"synced",s}},d=(c,e,t="smart")=>{const s={merged:[],conflicts:[]},n=e.reduce((i,r)=>(i[r._id]=r,i),{}),a=c.reduce((i,r)=>(i[r._id]=r,i),{});return c.forEach(i=>{const r=n[i._id];g(i,r)?(s.conflicts.push({local:i,server:r}),s.merged.push(m(i,r,t))):s.merged.push(i)}),e.forEach(i=>{a[i._id]||s.merged.push(i)}),s};class p{constructor(){this.syncInProgress=!1,this.lastSyncTime=null,this.listeners=[],h.addListener(this.handleNetworkChange.bind(this))}async handleNetworkChange(e){e?(console.log("Network is back online, attempting to sync..."),await this.syncData()):console.log("Network is offline, sync paused")}async syncData(e="smart"){if(this.syncInProgress)return console.log("Sync already in progress, skipping"),{success:!1,message:"Sync already in progress"};if(!h.getStatus())return console.log("Cannot sync while offline"),{success:!1,message:"Cannot sync while offline"};try{this.syncInProgress=!0,this.notifyListeners({status:"syncing",message:"Sync in progress"});const t=await this.processSyncQueue(),s=await this.syncWithServer(e);return this.lastSyncTime=new Date,this.notifyListeners({status:s.success?"completed":"failed",message:s.message,lastSyncTime:this.lastSyncTime,processedCount:t.processedCount,conflicts:s.conflicts||[]}),{success:s.success,message:s.message,processedCount:t.processedCount,conflicts:s.conflicts||[]}}catch(t){return console.error("Sync failed with error:",t),this.notifyListeners({status:"failed",message:"Sync failed with error",error:t.message}),{success:!1,message:"Sync failed with error: "+t.message}}finally{this.syncInProgress=!1}}async processSyncQueue(){try{const e=await l.syncQueue.toArray();let t=0;for(const s of e)try{let n;const{_id:a,...i}=s.data;switch(s.operation){case"create":n=await u.post(`/${s.entity}`,i);break;case"update":n=await u.put(`/${s.entity}/${a}`,i);break;case"delete":n=await u.delete(`/${s.entity}/${a}`);break;default:break}n&&n.status>=200&&n.status<300&&(await l.syncQueue.delete(s._id),t++,n.data&&(s.operation==="create"||s.operation==="update")&&await l.table(s.entity).put({...n.data,syncStatus:"synced"}))}catch(n){console.error(`Failed to process sync item: ${s._id}`,n)}return{processedCount:t}}catch(e){return console.error("Error processing sync queue:",e),{processedCount:0}}}async syncWithServer(e="smart"){try{const t=this.lastSyncTime?this.lastSyncTime.toISOString():null,s=await u.get(`/sync/changes${t?`?since=${t}`:""}`);if(!s||s.status!==200)return{success:!1,message:"Failed to fetch changes from server"};const n=s.data.changes,a={items:[],billings:[]};if(n.items&&n.items.length>0){const i=await l.items.filter(o=>o.syncStatus==="pending").toArray(),r=d(i,n.items,e);console.log("Resolved items:",r),a.items=r.conflicts;for(const o of r.merged)await l.items.put(o)}if(n.billings&&n.billings.length>0){const i=await l.billings.filter(o=>o.syncStatus==="pending").toArray(),r=d(i,n.billings,e);a.billings=r.conflicts;for(const o of r.merged)await l.billings.put(o)}return{success:!0,message:"Sync completed successfully",conflicts:[...a.items,...a.billings]}}catch(t){return console.error("Error syncing with server:",t),{success:!1,message:"Error syncing with server: "+t.message}}}addListener(e){return typeof e=="function"&&!this.listeners.includes(e)?(this.listeners.push(e),!0):!1}removeListener(e){const t=this.listeners.indexOf(e);return t!==-1?(this.listeners.splice(t,1),!0):!1}notifyListeners(e){this.listeners.forEach(t=>{try{t(e)}catch(s){console.error("Error in sync status listener:",s)}})}getLastSyncTime(){return this.lastSyncTime}isSyncing(){return this.syncInProgress}schedulePeriodicSync(e=15){return this.syncInterval&&clearInterval(this.syncInterval),this.syncInterval=setInterval(()=>{h.getStatus()&&!this.syncInProgress&&this.syncData()},e*60*1e3),this.syncInterval}stopPeriodicSync(){return this.syncInterval?(clearInterval(this.syncInterval),this.syncInterval=null,!0):!1}}const S=new p,C=Object.freeze(Object.defineProperty({__proto__:null,default:S},Symbol.toStringTag,{value:"Module"}));export{C as S,h as n,S as s};
