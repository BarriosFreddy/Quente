{"version":3,"file":"static/js/468.c6a2f56d.chunk.js","mappings":"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","sources":["components/shared/ConfirmDialog.js","constants.js","modules/billing/services/item-categories.service.js","modules/billing/views/item-categories/ItemCategoriesForm.js","modules/billing/views/item-categories/ItemCategories.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useState } from 'react'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react'\nimport { PropTypes } from 'prop-types'\n\nconst ConfirmDialog = forwardRef(function ConfirmDialog({ message, onResponse }, ref) {\n  const [visible, setVisible] = useState(false)\n\n  const handleResponse = (response) => {\n    onResponse && onResponse(response)\n  }\n\n  useImperativeHandle(\n    ref,\n    () => {\n      return {\n        show(toggle) {\n          setVisible(toggle)\n        },\n      }\n    },\n    [],\n  )\n\n  return (\n    <>\n      <CModal visible={visible} onClose={() => setVisible(false)}>\n        <CModalHeader onClose={() => setVisible(false)}>\n          <CModalTitle>Confirmaci√≥n</CModalTitle>\n        </CModalHeader>\n        <CModalBody>{message}</CModalBody>\n        <CModalFooter>\n          <CButton\n            style={{ width: 50 }}\n            variant=\"outline\"\n            color=\"secondary\"\n            onClick={() => handleResponse(true)}\n          >\n            SI\n          </CButton>\n          <CButton style={{ width: 50 }} color=\"primary\" onClick={() => handleResponse(false)}>\n            NO\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n})\n\nConfirmDialog.propTypes = {\n  show: PropTypes.bool,\n  message: PropTypes.string,\n  onResponse: PropTypes.func,\n}\n\nexport default ConfirmDialog\n","const CONSTANTS = {\n  ENTER_KEYCODE: 13,\n  TAB_KEYCODE: 9,\n  AVAILABLE_BILLS: [2000, 5000, 10000, 20000, 50000, 100000],\n}\n\nexport default CONSTANTS\n","import {\n  saveSuccess,\n  setItemCategories,\n  setCodeRegistered,\n} from '../reducers/item-categories.reducer'\n\nexport const saveItemCategory = (billing) => async (dispatch, _, api) => {\n  const { status } = await api.post('/item-categories', billing)\n  if (status === 201) {\n    dispatch(saveSuccess(true))\n    dispatch(getItemCategories({ page: 1 }))\n  } else {\n    dispatch(saveSuccess(false))\n  }\n}\n\nexport const updateItemCategory = (itemCategory) => async (dispatch, _, api) => {\n  const itemCategoryToUpdate = { ...itemCategory }\n  const id = itemCategoryToUpdate._id\n  delete itemCategoryToUpdate._id\n  const { status } = await api.put(`/item-categories/${id}`, itemCategoryToUpdate)\n  if (status === 201) {\n    dispatch(saveSuccess(true))\n    dispatch(getItemCategories({ page: 1 }))\n  } else {\n    dispatch(saveSuccess(false))\n  }\n}\n\nexport const getItemCategories = (params) => async (dispatch, _, api) => {\n  const searchParams = new URLSearchParams(params).toString()\n  const { data, status } = await api.get(\n    `/item-categories${searchParams.length > 0 ? '?' + searchParams : ''}`,\n  )\n  if (status === 200) dispatch(setItemCategories(data))\n}\n\nexport const validateCodeRegistered = (code) => async (dispatch, _, api) => {\n  if (!code) return\n  const { data, status } = await api.get(`/item-categories/code/${code}`)\n  if (status === 200) dispatch(setCodeRegistered(data))\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { CButton, CRow, CContainer, CCol, CFormInput, CForm } from '@coreui/react'\nimport ConfirmDialog from '../../../../components/shared/ConfirmDialog'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { validateCodeRegistered } from '../../services/item-categories.service'\nimport { setCodeRegistered } from '../../reducers/item-categories.reducer'\n\nconst categoryInitialState = {\n  code: '',\n  name: '',\n  description: '',\n}\nconst failedValidationsInitState = {\n  code: false,\n  name: false,\n  description: false,\n}\n\nfunction ItemCategoriesForm(props) {\n  const dispatch = useDispatch()\n  const confirmDialogRef = useRef()\n  const isCodeRegistered = useSelector((state) => state.itemCategories.isCodeRegistered)\n  const [itemCategory, setItemCategory] = useState(categoryInitialState)\n  const [failedValidations, setFailedValidations] = useState(failedValidationsInitState)\n  const oldCode = props.itemCategory?.code\n\n  useEffect(() => {\n    props.itemCategory && setItemCategory(props.itemCategory)\n  }, [props.itemCategory])\n\n  const validateCodeExistence = (code) => {\n    if (props.itemCategory && oldCode !== code) {\n      dispatch(validateCodeRegistered(code))\n    }\n  }\n\n  const onChangeField = ({ target: { name, value } }) => {\n    setItemCategory({\n      ...itemCategory,\n      [name]: value,\n    })\n    setFailedValidations({ ...failedValidations, [name]: !value })\n    if (name === 'code') validateCodeExistence(value)\n  }\n\n  const clearFieldsForm = () => {\n    setItemCategory(categoryInitialState)\n    dispatch(setCodeRegistered(false))\n    setFailedValidations(failedValidationsInitState)\n  }\n\n  const isValidForm = () => {\n    const { code, name, description } = {\n      ...itemCategory,\n    }\n    const failedValidationsObj = { ...failedValidations }\n    failedValidationsObj.code = !code || isCodeRegistered\n    failedValidationsObj.name = !name\n    failedValidationsObj.description = !description\n    setFailedValidations(failedValidationsObj)\n    return Object.values(failedValidationsObj).every((validation) => validation === false)\n  }\n\n  const handleSave = async () => {\n    if (isValidForm()) {\n      props.onSave({\n        ...itemCategory,\n      })\n      clearFieldsForm()\n    }\n  }\n\n  const handleCancel = () => {\n    confirmDialogRef.current.show(true)\n  }\n\n  const handleResponseCancel = (sureCancel) => {\n    sureCancel && props.onCancel()\n    if (!sureCancel) {\n      confirmDialogRef.current.show(false)\n      clearFieldsForm()\n    }\n  }\n\n  return (\n    <>\n      <CContainer fluid>\n        <CForm className=\"row g-3 needs-validation\" noValidate>\n          <CRow className=\"mt-2\">\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormInput\n                label=\"C√≥digo\"\n                type=\"text\"\n                name=\"code\"\n                value={itemCategory.code}\n                feedback={\n                  isCodeRegistered ? 'El c√≥digo ya se encuentra registrado' : 'Campo obligatorio'\n                }\n                invalid={isCodeRegistered || failedValidations.code}\n                required\n                onChange={(event) => onChangeField(event)}\n              />\n            </CCol>\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormInput\n                label=\"Nombre\"\n                type=\"text\"\n                name=\"name\"\n                value={itemCategory.name}\n                feedbackInvalid=\"Campo obligatorio\"\n                invalid={failedValidations.name}\n                required\n                onChange={(event) => onChangeField(event)}\n              />\n            </CCol>\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormInput\n                label=\"Descripci√≥n\"\n                type=\"text\"\n                name=\"description\"\n                value={itemCategory.description}\n                feedbackInvalid=\"Campo obligatorio\"\n                invalid={failedValidations.description}\n                required\n                onChange={(event) => onChangeField(event)}\n              />\n            </CCol>\n          </CRow>\n          <CRow className=\"mt-4\">\n            <CCol className=\"text-center\" xs=\"8\" lg={{ offset: 4, span: 4 }}>\n              <CButton color=\"success\" type=\"button\" onClick={() => handleSave()}>\n                {props.itemCategory ? 'EDITAR' : 'GUARDAR'}\n              </CButton>\n              &nbsp; &nbsp;\n              <CButton color=\"light\" onClick={() => handleCancel()}>\n                CANCELAR\n              </CButton>\n            </CCol>\n          </CRow>\n        </CForm>\n      </CContainer>\n      <ConfirmDialog\n        ref={confirmDialogRef}\n        onResponse={handleResponseCancel}\n        message=\"¬øEst√°s seguro que quieres cancelar?\"\n      ></ConfirmDialog>\n    </>\n  )\n}\n\nexport default ItemCategoriesForm\n\nItemCategoriesForm.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  itemCategory: PropTypes.object,\n}\n","import React, { useState, useEffect } from 'react'\n\nimport {\n  CCard,\n  CCardHeader,\n  CCardFooter,\n  CContainer,\n  CRow,\n  CButton,\n  CCardBody,\n  CCol,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CInputGroup,\n  CFormInput,\n  CCardTitle,\n} from '@coreui/react'\nimport ItemCategoriesForm from './ItemCategoriesForm'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getItemCategories } from 'src/modules/billing/services/item-categories.service'\nimport CONSTANTS from 'src/constants'\nimport { Helmet } from 'react-helmet'\nimport { saveItemCategory, updateItemCategory } from '../../services/item-categories.service'\n\nconst { ENTER_KEYCODE, TAB_KEYCODE } = CONSTANTS\n\nfunction Categories() {\n  const dispatch = useDispatch()\n  const itemCategories = useSelector((state) => state.itemCategories.itemCategories)\n  const [searchTerm, setSearchTerm] = useState('')\n  let [itemCategory, setItemCategory] = useState(null)\n  let [editing, setEditing] = useState(false)\n  let [page, setPage] = useState(1)\n\n  useEffect(() => {\n    setSearchTerm('')\n    dispatch(getItemCategories())\n  }, [dispatch])\n\n  const handleSave = (itemCategory) => {\n    if (itemCategory._id) dispatch(updateItemCategory(itemCategory))\n    else dispatch(saveItemCategory(itemCategory))\n    setItemCategory(null)\n    setEditing(false)\n  }\n\n  const handleEdit = (itemCategory) => {\n    setEditing(true)\n    setItemCategory(itemCategory)\n  }\n\n  const handleCancel = async () => {\n    dispatch(getItemCategories({ page: 1 }))\n    setEditing(false)\n  }\n\n  const handleNextPage = async () => {\n    const newPage = page + 1\n    setPage(newPage)\n    dispatch(getItemCategories({ page: newPage }))\n  }\n\n  const handlePrevPage = async () => {\n    const newPage = page === 1 ? 1 : page - 1\n    setPage(newPage)\n    dispatch(getItemCategories({ page: newPage }))\n  }\n\n  const onChangeField = ({ target: { value } }) => {\n    setSearchTerm(value)\n  }\n\n  const onKeyDownCodeField = async ({ keyCode }) => {\n    if ([ENTER_KEYCODE, TAB_KEYCODE].includes(keyCode)) search()\n  }\n\n  const search = async () => {\n    if (!!searchTerm) {\n      dispatch(getItemCategories({ code: searchTerm.trim(), name: searchTerm.trim(), page: 1 }))\n      return\n    }\n    dispatch(getItemCategories({ page: 1 }))\n  }\n\n  const handleNew = () => {\n    setEditing(true)\n    setItemCategory(null)\n  }\n\n  const handleClear = () => {\n    setSearchTerm('')\n    dispatch(getItemCategories({ page: 1 }))\n  }\n\n  return (\n    <>\n      <CContainer className=\"mt-6\" fluid>\n        <CCard className=\"mt-6 shadow border-10\">\n          <CCardHeader>\n            <Helmet>\n              <title>CATEGORIA DE ITEMS</title>\n            </Helmet>\n            <CCardTitle>CATEGORIA DE ITEMS</CCardTitle>\n          </CCardHeader>\n          <CCardBody>\n            {!editing && (\n              <CRow>\n                <CCol xs=\"4\" lg=\"3\">\n                  <CButton variant=\"outline\" color=\"success\" onClick={handleNew}>\n                    NUEVA CATEGORIA\n                  </CButton>\n                </CCol>\n                <CCol lg=\"5\">\n                  <CInputGroup>\n                    <CFormInput\n                      type=\"text\"\n                      name=\"searchTerm\"\n                      placeholder=\"...\"\n                      value={searchTerm}\n                      onChange={(event) => onChangeField(event)}\n                      onKeyDown={(event) => onKeyDownCodeField(event)}\n                    />\n                    <CButton type=\"button\" variant=\"outline\" color=\"primary\" onClick={search}>\n                      BUSCAR\n                    </CButton>\n                    <CButton\n                      variant=\"outline\"\n                      type=\"button\"\n                      color=\"secondary\"\n                      onClick={handleClear}\n                    >\n                      BORRAR\n                    </CButton>\n                  </CInputGroup>\n                </CCol>\n              </CRow>\n            )}\n            {!editing && (\n              <>\n                <div className=\"d-lg-none\">\n                  {itemCategories &&\n                    itemCategories.map(({ _id, code, name, description }) => (\n                      <CCard\n                        key={_id}\n                        style={{\n                          width: 'auto',\n                        }}\n                      >\n                        <CRow className=\"g-0\">\n                          <CCol xs={12}>\n                            <CCardBody>\n                              <CRow>\n                                <CCol>{code}</CCol>\n                              </CRow>\n                              <CRow>\n                                <CCol>{name}</CCol>\n                              </CRow>\n                              <CRow>\n                                <CCol>{description}</CCol>\n                              </CRow>\n                            </CCardBody>\n                          </CCol>\n                        </CRow>\n                      </CCard>\n                    ))}\n                </div>\n                <div className=\"d-none d-lg-block\">\n                  <CTable>\n                    <CTableHead>\n                      <CTableRow>\n                        <CTableHeaderCell>C√≥digo</CTableHeaderCell>\n                        <CTableHeaderCell>Nombre</CTableHeaderCell>\n                        <CTableHeaderCell>Descripci√≥n</CTableHeaderCell>\n                        <CTableHeaderCell>&nbsp;</CTableHeaderCell>\n                      </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                      {itemCategories &&\n                        itemCategories.map((itemCategory) => (\n                          <CTableRow key={itemCategory._id}>\n                            <CTableDataCell xs=\"12\" className=\"text-uppercase\">\n                              {itemCategory.code}\n                            </CTableDataCell>\n                            <CTableDataCell className=\"fs-6\" xs=\"12\">\n                              {itemCategory.name}\n                            </CTableDataCell>\n                            <CTableDataCell xs=\"12\" className=\"text-break\">\n                              {itemCategory.description}\n                            </CTableDataCell>\n                            <CTableDataCell xs=\"12\">\n                              <CButton\n                                size=\"sm\"\n                                variant=\"outline\"\n                                color=\"info\"\n                                onClick={() => handleEdit(itemCategory)}\n                              >\n                                Editar\n                              </CButton>\n                            </CTableDataCell>\n                          </CTableRow>\n                        ))}\n                    </CTableBody>\n                  </CTable>\n                </div>\n\n                <CCardFooter className=\"py-4\">\n                  <CRow>\n                    <CCol>\n                      <div className=\"d-grid col-12 mx-auto\">\n                        <CButton\n                          type=\"button\"\n                          variant=\"outline\"\n                          color=\"secondary\"\n                          onClick={handlePrevPage}\n                        >\n                          ANTERIOR\n                        </CButton>\n                      </div>\n                    </CCol>\n                    <CCol>\n                      <div className=\"d-grid col-12 mx-auto\">\n                        <CButton\n                          type=\"button\"\n                          variant=\"outline\"\n                          color=\"secondary\"\n                          onClick={handleNextPage}\n                        >\n                          SIGUIENTE\n                        </CButton>\n                      </div>\n                    </CCol>\n                  </CRow>\n                </CCardFooter>\n              </>\n            )}\n            {editing && (\n              <ItemCategoriesForm\n                itemCategory={itemCategory}\n                onSave={handleSave}\n                onCancel={handleCancel}\n              />\n            )}\n          </CCardBody>\n        </CCard>\n      </CContainer>\n    </>\n  )\n}\n\nexport default Categories\n"],"names":["ConfirmDialog","forwardRef","ref","message","onResponse","useState","visible","setVisible","handleResponse","response","useImperativeHandle","show","toggle","onClose","style","width","variant","color","onClick","ENTER_KEYCODE","TAB_KEYCODE","AVAILABLE_BILLS","saveItemCategory","billing","dispatch","_","api","post","status","saveSuccess","getItemCategories","page","updateItemCategory","itemCategory","itemCategoryToUpdate","id","_id","put","params","searchParams","URLSearchParams","toString","get","length","data","setItemCategories","validateCodeRegistered","code","setCodeRegistered","categoryInitialState","name","description","failedValidationsInitState","props","useDispatch","confirmDialogRef","useRef","isCodeRegistered","useSelector","state","itemCategories","setItemCategory","failedValidations","setFailedValidations","oldCode","useEffect","onChangeField","target","value","clearFieldsForm","isValidForm","failedValidationsObj","Object","values","every","validation","handleSave","onSave","fluid","className","noValidate","xs","lg","label","type","feedback","invalid","required","onChange","event","feedbackInvalid","offset","span","current","sureCancel","onCancel","CONSTANTS","searchTerm","setSearchTerm","editing","setEditing","setPage","handleCancel","handleNextPage","newPage","handlePrevPage","onKeyDownCodeField","keyCode","includes","search","trim","Helmet","placeholder","onKeyDown","map","size","handleEdit"],"sourceRoot":""}