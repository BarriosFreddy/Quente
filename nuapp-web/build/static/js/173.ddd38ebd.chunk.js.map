{"version":3,"file":"static/js/173.ddd38ebd.chunk.js","mappings":"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","sources":["modules/billing/services/billings.service.js","modules/billing/views/dashboard/Dashboard.js","utils/index.js"],"sourcesContent":["import {\n  setSaveSuccess,\n  setBillings,\n  saveBillingLocally,\n  setLoading,\n} from '../reducers/billings.reducer'\nimport isOnline from 'is-online'\nlet isonline = false\n\nexport const saveBilling = (billing) => async (dispatch, getState, api) => {\n  isonline = await isOnline()\n  dispatch(setLoading(true))\n  const { status } = isonline\n    ? await api.post('/billings', billing)\n    : saveLocally(dispatch, getState(), billing)\n  status === 201 ? dispatch(setSaveSuccess(true)) : dispatch(setSaveSuccess(false))\n  dispatch(setLoading(false))\n}\n\nexport const saveBillingBulk = (billings) => async (dispatch, getState, api) => {\n  isonline = await isOnline()\n  dispatch(setLoading(true))\n  const { status } = await api.post('/billings/bulk', billings)\n  status === 201 ? dispatch(setSaveSuccess(true)) : dispatch(setSaveSuccess(false))\n  dispatch(setLoading(false))\n}\n\nexport const getBillings =\n  ({ page = 1 } = {}) =>\n  async (dispatch, getState, api) => {\n    isonline = await isOnline()\n    const { data, status } = isonline\n      ? await api.get(`/billings?page=${page}`)\n      : getLocally(dispatch, getState())\n    if (status === 200) dispatch(setBillings(data))\n  }\n\nexport const getBillingsGTDate = (date) => async (dispatch, _, api) => {\n  const { data, status } = await api.get(`/billings/per/${date}`)\n  if (status === 200) dispatch(setBillings(data))\n}\n\nfunction saveLocally(dispatch, state, billing) {\n  const { billings } = state.billing.offline\n  let billingsArray = []\n  if (Array.isArray(billings)) {\n    const arr = JSON.parse(JSON.stringify(billings))\n    billingsArray = [...billingsArray, ...arr]\n  }\n  billingsArray.unshift(billing)\n  dispatch(saveBillingLocally(billingsArray))\n  return { status: 201 }\n}\n\nfunction getLocally(dispatch, state) {\n  const billings = [state.billing.offline.billings]\n  if (billings.length > 10) billings.length = 10\n  dispatch(setBillings(billings))\n  return { data: billings, status: 200 }\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport { cilCloudDownload } from '@coreui/icons'\nimport dayjs from 'dayjs'\nimport { getBillingsGTDate } from '../../../billing/services/billings.service'\nimport { formatCurrency } from 'src/utils'\nimport { Helmet } from 'react-helmet'\n\nconst progressExample = [\n  { title: 'Visits', value: '29.703 Users', percent: 40, color: 'success' },\n  { title: 'Unique', value: '24.093 Users', percent: 20, color: 'info' },\n  { title: 'Pageviews', value: '78.706 Views', percent: 60, color: 'warning' },\n  { title: 'New Users', value: '22.123 Users', percent: 80, color: 'danger' },\n  { title: 'Bounce Rate', value: 'Average Rate', percent: 40.15, color: 'primary' },\n]\n\nconst Dashboard = () => {\n  const dispatch = useDispatch()\n  const billings = useSelector((state) => state.billing.billings)\n  const tenDaysBefore = dayjs().subtract(10, 'days').format('YYYY-MM-DD')\n  useEffect(() => {\n    dispatch(getBillingsGTDate(tenDaysBefore))\n  }, [dispatch, tenDaysBefore])\n  console.log({ billings })\n  const labels = billings ? billings.map(({ createdAt }) => createdAt) : []\n  const data = billings ? billings.map(({ billAmount }) => billAmount) : []\n  const dataReversed = [...billings].reverse()\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <Helmet>\n          <title>DASHBOARD</title>\n        </Helmet>\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Ventas por d√≠a\n              </h4>\n              {/* <div className=\"small text-medium-emphasis\">January - July 2021</div> */}\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n              <CButtonGroup className=\"float-end me-3\">\n                {['Day', 'Month', 'Year'].map((value) => (\n                  <CButton\n                    color=\"outline-secondary\"\n                    key={value}\n                    className=\"mx-0\"\n                    active={value === 'Day'}\n                  >\n                    {value}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels,\n              datasets: [\n                {\n                  label: 'Daily sales',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data,\n                  fill: true,\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 1,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n          <br />\n\n          <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n            <CTableHead color=\"light\">\n              <CTableRow>\n                <CTableHeaderCell className=\"text-center\">D√≠a</CTableHeaderCell>\n                <CTableHeaderCell className=\"text-center\">Ventas</CTableHeaderCell>\n              </CTableRow>\n            </CTableHead>\n            <CTableBody>\n              {dataReversed.map(({ createdAt, billAmount }, index) => (\n                <CTableRow key={index}>\n                  <CTableDataCell className=\"text-center\">{createdAt}</CTableDataCell>\n                  <CTableDataCell className=\"text-center\">\n                    {formatCurrency(billAmount)}\n                  </CTableDataCell>\n                </CTableRow>\n              ))}\n            </CTableBody>\n          </CTable>\n        </CCardBody>\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 5 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <div className=\"text-medium-emphasis\">{item.title}</div>\n                <strong>\n                  {item.value} ({item.percent}%)\n                </strong>\n                <CProgress thin className=\"mt-2\" color={item.color} value={item.percent} />\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>\n    </>\n  )\n}\n\nexport default Dashboard\n","import dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\ndayjs.extend(utc)\n\nexport const formatCurrency = (amount) => {\n  return Number.isInteger(amount) && amount >= 0\n    ? new Intl.NumberFormat('es-CO', {\n        style: 'currency',\n        currency: 'COP',\n        maximumFractionDigits: 0,\n      }).format(amount)\n    : amount\n}\n\nexport const formatDate = (dateObject, format = 'DD-MM-YYYY hh:mm a') => {\n  if (typeof dateObject === 'string') {\n    return dayjs(dateObject).utcOffset(-300).format(format)\n  }\n  const { date, offset } = dateObject || {}\n  if (!date || !offset) return ''\n  return dayjs(date)\n    .utcOffset(offset / 60000)\n    .format(format)\n}\n"],"names":["isonline","saveBilling","billing","dispatch","getState","api","isOnline","setLoading","post","saveLocally","status","setSaveSuccess","saveBillingBulk","billings","getBillings","page","get","getLocally","data","setBillings","getBillingsGTDate","date","_","state","offline","billingsArray","Array","isArray","arr","JSON","parse","stringify","unshift","saveBillingLocally","length","progressExample","title","value","percent","color","useDispatch","useSelector","tenDaysBefore","dayjs","subtract","format","useEffect","console","log","labels","map","createdAt","billAmount","dataReversed","reverse","className","sm","id","icon","cilCloudDownload","active","style","height","marginTop","datasets","label","backgroundColor","hexToRgba","getStyle","borderColor","pointHoverBackgroundColor","borderWidth","fill","options","maintainAspectRatio","plugins","legend","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","Math","ceil","max","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","align","hover","responsive","index","formatCurrency","xs","cols","md","item","thin","utc","amount","Number","isInteger","Intl","NumberFormat","currency","maximumFractionDigits","formatDate","dateObject","utcOffset","offset"],"sourceRoot":""}