{"version":3,"file":"static/js/270.0065c6eb.chunk.js","mappings":"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","sources":["constants.js","modules/billing/services/item-categories.service.js","modules/billing/views/items/ItemForm.js","modules/billing/views/items/Items.js","utils/index.js"],"sourcesContent":["const CONSTANTS = {\n  ENTER_KEYCODE: 13,\n  TAB_KEYCODE: 9,\n  AVAILABLE_BILLS: [2000, 5000, 10000, 20000, 50000, 100000],\n}\n\nexport default CONSTANTS\n","import { saveSuccess, setItemCategories } from '../reducers/item-categories.reducer'\n\nexport const saveItemCategory = (billing) => async (dispatch, _, api) => {\n  const { status } = await api.post('/item-categories', billing)\n  status === 200 ? dispatch(saveSuccess(true)) : dispatch(saveSuccess(false))\n}\n\nexport const getItemCategories = (params) => async (dispatch, _, api) => {\n  const searchParams = new URLSearchParams(params).toString()\n  const { data, status } = await api.get(\n    `/item-categories${searchParams.length > 0 ? '?' + searchParams : ''}`,\n  )\n  if (status === 200) dispatch(setItemCategories(data))\n}\n","/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {\n  CButton,\n  CRow,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CContainer,\n  CCol,\n  CFormInput,\n  CForm,\n  CFormSelect,\n} from '@coreui/react'\nimport Quagga from 'quagga'\nimport { getItemCategories } from 'src/modules/billing/services/item-categories.service'\nimport { existByCode, saveItem } from '../../services/items.service'\n\nconst itemInitialState = {\n  name: '',\n  code: '',\n  description: '',\n  price: '',\n  categoryId: '',\n  units: 0,\n  measurementUnit: '',\n}\n\nfunction ItemForm(props) {\n  const dispatch = useDispatch()\n  const itemCategories = useSelector((state) => state.itemCategories.itemCategories)\n  const itemGlobal = useSelector((state) => state.items.item)\n  const codeRegistered = useSelector((state) => state.items.existsByCode)\n  const [item, setItem] = useState(itemInitialState)\n  const [failedValidations, setFailedValidations] = useState({\n    code: false,\n    description: false,\n    name: false,\n    price: false,\n    categoryId: false,\n    measurementUnit: false,\n  })\n  const [modal, setModal] = useState(false)\n  const toggle = () => setModal(!modal)\n\n  useEffect(() => {\n    itemGlobal && setItem(itemGlobal)\n    dispatch(getItemCategories({ parse: true }))\n  }, [dispatch, itemGlobal])\n\n  const validateCodeExistence = (code) => {\n    dispatch(existByCode(code))\n  }\n\n  const onChangeField = ({ target: { name, value } }) => {\n    setItem({\n      ...item,\n      [name]: value,\n    })\n    setFailedValidations({ ...failedValidations, [name]: !value })\n    if (name === 'code') {\n      validateCodeExistence(value)\n    }\n  }\n\n  const populateFieldsForm = ({ _id, code, description, price }) => {\n    setItem({\n      ...item,\n      _id,\n      code,\n      description,\n      price,\n    })\n  }\n\n  const clearFieldsForm = () => {\n    setItem(itemInitialState)\n  }\n\n  const scanItem = () => {\n    toggle()\n    setTimeout(() => {\n      Quagga.init(\n        {\n          inputStream: {\n            name: 'Live',\n            type: 'LiveStream',\n            constraints: {\n              width: 320,\n              height: 380,\n              facingMode: 'environment',\n            },\n            target: document.querySelector('#reader'), // Or '#yourElement' (optional)\n          },\n          decoder: {\n            readers: [\n              {\n                format: 'ean_reader',\n                config: {\n                  supplements: ['ean_13_reader'],\n                },\n              },\n            ],\n          },\n        },\n        function (err) {\n          if (err) {\n            console.log(err)\n            return\n          }\n          console.log('Ready to start')\n          Quagga.start()\n        },\n      )\n      Quagga.onDetected(({ codeResult: { code } }) => {\n        console.log({ code })\n        setItem({\n          ...item,\n          code,\n        })\n        setModal(false)\n        Quagga.stop()\n      })\n      Quagga.onProcessed((result) => {\n        const drawingCanvas = Quagga.canvas.dom.overlay\n        drawingCanvas.style.display = 'none'\n      })\n    }, 300)\n  }\n\n  const closeBtn = (\n    <button className=\"close\" onClick={toggle}>\n      &times;\n    </button>\n  )\n\n  const isValidForm = () => {\n    const { name, code, description, price, categoryId, measurementUnit } = {\n      ...item,\n    }\n    const failedValidationsObj = { ...failedValidations }\n    failedValidationsObj.code = !code || codeRegistered\n    failedValidationsObj.description = !description\n    failedValidationsObj.name = !name\n    failedValidationsObj.price = !price\n    failedValidationsObj.categoryId = !categoryId\n    failedValidationsObj.measurementUnit = !measurementUnit\n    setFailedValidations(failedValidationsObj)\n    return Object.values(failedValidationsObj).every((validation) => validation === false)\n  }\n\n  const save = async () => {\n    if (isValidForm()) {\n      props.save({\n        ...item,\n      })\n      clearFieldsForm()\n    }\n  }\n\n  const cancel = () => {\n    props.cancel()\n  }\n  console.log({ codeRegistered })\n  return (\n    <>\n      <CContainer fluid>\n        <CForm className=\"row g-3 needs-validation\" noValidate>\n          <CRow style={{ marginTop: '40px' }}>\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormInput\n                label=\"Código\"\n                type=\"text\"\n                name=\"code\"\n                value={item.code}\n                feedback={\n                  codeRegistered ? 'El código ya se encuentra registrado' : 'Campo obligatorio'\n                }\n                invalid={codeRegistered || failedValidations.code}\n                required\n                onChange={(event) => onChangeField(event)}\n              />\n            </CCol>\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormInput\n                label=\"Nombre\"\n                type=\"text\"\n                name=\"name\"\n                value={item.name}\n                feedbackInvalid=\"Campo obligatorio\"\n                invalid={failedValidations.name}\n                required\n                onChange={(event) => onChangeField(event)}\n              />\n            </CCol>\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormInput\n                label=\"Descripción\"\n                type=\"text\"\n                name=\"description\"\n                value={item.description}\n                feedbackInvalid=\"Campo obligatorio\"\n                invalid={failedValidations.description}\n                required\n                onChange={(event) => onChangeField(event)}\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormInput\n                label=\"Precio\"\n                type=\"number\"\n                name=\"price\"\n                value={item.price}\n                feedbackInvalid=\"Campo obligatorio\"\n                invalid={failedValidations.price}\n                required\n                onChange={(event) => onChangeField(event)}\n              />\n            </CCol>\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormSelect\n                label=\"Categoria\"\n                name=\"categoryId\"\n                value={item.categoryId}\n                required\n                onChange={(event) => onChangeField(event)}\n                aria-label=\"Default select example\"\n                options={['Seleccione la categoria', ...itemCategories]}\n              />\n            </CCol>\n            <CCol xs=\"12\" lg=\"4\">\n              <CFormInput\n                label=\"Unidad de medida\"\n                type=\"text\"\n                name=\"measurementUnit\"\n                value={item.measurementUnit}\n                feedbackInvalid=\"Campo obligatorio\"\n                invalid={failedValidations.measurementUnit}\n                required\n                onChange={(event) => onChangeField(event)}\n              />\n            </CCol>\n          </CRow>\n          <CRow className=\"mt-5\">\n            <CCol xs=\"8\" lg=\"2\">\n              <CButton variant=\"outline\" color=\"success\" type=\"button\" onClick={() => save()}>\n                {itemGlobal ? 'ACTUALIZAR' : 'GUARDAR'}\n              </CButton>\n            </CCol>\n            <CCol xs=\"4\" lg=\"2\">\n              <CButton variant=\"outline\" color=\"secondary\" onClick={() => cancel()}>\n                CANCELAR\n              </CButton>\n            </CCol>\n          </CRow>\n        </CForm>\n      </CContainer>\n      <CModal isOpen={modal} toggle={toggle}>\n        <CModalHeader toggle={toggle} close={closeBtn}>\n          Escaneando\n        </CModalHeader>\n        <CModalBody>\n          <div id=\"reader\" width=\"600px\" style={{ maxWidth: '750px' }}></div>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={toggle}>\n            Cancelar\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\n\nexport default ItemForm\n\nItemForm.propTypes = {\n  cancel: PropTypes.func.isRequired,\n  save: PropTypes.func.isRequired,\n}\n","import React, { useState, useEffect } from 'react'\n\nimport {\n  CCard,\n  CCardHeader,\n  CCardFooter,\n  CContainer,\n  CRow,\n  CButton,\n  CCardBody,\n  CCol,\n  CCardImage,\n  CTable,\n  CTableBody,\n  CTableRow,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CInputGroup,\n  CFormInput,\n} from '@coreui/react'\nimport ItemForm from './ItemForm'\nimport DefaultImg from './../../../../assets/images/new.ico'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getItems, saveItem, updateItem } from 'src/modules/billing/services/items.service'\nimport CONSTANTS from 'src/constants'\nimport { setItem } from '../../reducers/items.reducer'\nimport { formatCurrency } from 'src/utils'\n\nconst { ENTER_KEYCODE, TAB_KEYCODE } = CONSTANTS\n\nfunction Item() {\n  const dispatch = useDispatch()\n  const items = useSelector((state) => state.items.items)\n  //const saveSuccess = useSelector((state) => state.items.saveSuccess)\n  const [searchTerm, setSearchTerm] = useState('')\n  let [editing, setEditing] = useState(false)\n  let [page, setPage] = useState(1)\n\n  useEffect(() => {\n    setSearchTerm('')\n  }, [])\n\n  useEffect(() => {\n    dispatch(getItems({ page: 1 }))\n  }, [dispatch])\n\n  const save = (item) => {\n    if (item._id) {\n      dispatch(updateItem(item))\n      return\n    }\n    dispatch(saveItem(item))\n  }\n\n  const cancel = async () => {\n    dispatch(getItems({ page: 1 }))\n    setEditing(false)\n  }\n\n  const handlePrevPage = async () => {\n    const newPage = page === 1 ? 1 : page - 1\n    setPage(newPage)\n    dispatch(getItems({ page: newPage }))\n  }\n\n  const handleNextPage = async () => {\n    const newPage = page + 1\n    setPage(newPage)\n    dispatch(getItems({ page: newPage }))\n  }\n\n  const onChangeField = ({ target: { value } }) => {\n    setSearchTerm(value)\n  }\n\n  const onKeyDownCodeField = async ({ keyCode }) => {\n    if ([ENTER_KEYCODE, TAB_KEYCODE].includes(keyCode)) search()\n  }\n\n  const search = async () => {\n    if (!!searchTerm) {\n      dispatch(getItems({ code: searchTerm.trim(), name: searchTerm.trim(), page: 1 }))\n      return\n    }\n    dispatch(getItems({ page: 1 }))\n  }\n\n  const handleEdit = (item) => {\n    setEditing(true)\n    dispatch(setItem(item))\n  }\n\n  const handleNewItem = () => {\n    dispatch(setItem(null))\n    setEditing(true)\n  }\n\n  return (\n    <>\n      <CContainer className=\"mt--6\" fluid>\n        <CRow>\n          <CCol>\n            <CCard className=\"mt-6 shadow border-10\">\n              <CCardHeader className=\"border-0\">\n                {!editing && (\n                  <CRow>\n                    <CCol xs=\"4\" lg=\"3\">\n                      <CButton variant=\"outline\" color=\"success\" onClick={handleNewItem}>\n                        NUEVO ITEM\n                      </CButton>\n                    </CCol>\n                    <CCol lg=\"5\">\n                      <CInputGroup>\n                        <CFormInput\n                          type=\"text\"\n                          name=\"searchTerm\"\n                          placeholder=\"...\"\n                          value={searchTerm}\n                          onChange={(event) => onChangeField(event)}\n                          onKeyDown={(event) => onKeyDownCodeField(event)}\n                        />\n                        <CButton type=\"button\" variant=\"outline\" color=\"primary\" onClick={search}>\n                          BUSCAR\n                        </CButton>\n                      </CInputGroup>\n                    </CCol>\n                  </CRow>\n                )}\n              </CCardHeader>\n              <CCardBody>\n                {!editing && (\n                  <>\n                    <div className=\"d-lg-none\">\n                      {items.map(({ name, code, description, price }) => (\n                        <CCard\n                          key={code}\n                          style={{\n                            width: 'auto',\n                          }}\n                        >\n                          <CRow className=\"g-0\" key={code}>\n                            <CCol xs={4}>\n                              <CCardImage src={DefaultImg} />\n                            </CCol>\n                            <CCol xs={8}>\n                              <CCardBody>\n                                <CRow>\n                                  <CCol>{name}</CCol>\n                                </CRow>\n                                <CRow>\n                                  <CCol>{code}</CCol>\n                                </CRow>\n                                <CRow>\n                                  <CCol>{description}</CCol>\n                                </CRow>\n                                <CRow>\n                                  <CCol>${price}</CCol>\n                                </CRow>\n                              </CCardBody>\n                            </CCol>\n                          </CRow>\n                        </CCard>\n                      ))}\n                    </div>\n                    <div className=\"d-none d-lg-block\">\n                      <CTable>\n                        <CTableHead>\n                          <CTableRow>\n                            <CTableHeaderCell>Nombre</CTableHeaderCell>\n                            <CTableHeaderCell>Código</CTableHeaderCell>\n                            <CTableHeaderCell>Descripción</CTableHeaderCell>\n                            <CTableHeaderCell>Precio</CTableHeaderCell>\n                            <CTableHeaderCell>&nbsp;</CTableHeaderCell>\n                          </CTableRow>\n                        </CTableHead>\n                        <CTableBody>\n                          {items.map((item) => (\n                            <CTableRow key={item.code}>\n                              <CTableDataCell xs=\"12\" className=\"text-uppercase\">\n                                {item.name}\n                              </CTableDataCell>\n                              <CTableDataCell className=\"fs-6\" xs=\"12\">\n                                {item.code}\n                              </CTableDataCell>\n                              <CTableDataCell xs=\"12\" className=\"text-break\">\n                                {item.description}\n                              </CTableDataCell>\n                              <CTableDataCell xs=\"12\">{formatCurrency(item.price)}</CTableDataCell>\n                              <CTableDataCell xs=\"12\">\n                                <CButton\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  color=\"info\"\n                                  onClick={() => handleEdit(item)}\n                                >\n                                  Editar\n                                </CButton>\n                              </CTableDataCell>\n                            </CTableRow>\n                          ))}\n                        </CTableBody>\n                      </CTable>\n                    </div>\n\n                    <CCardFooter className=\"py-4\">\n                      <CRow>\n                        <CCol>\n                          <div className=\"d-grid col-12 mx-auto\">\n                            <CButton\n                              type=\"button\"\n                              variant=\"outline\"\n                              color=\"secondary\"\n                              onClick={handlePrevPage}\n                            >\n                              ANTERIOR\n                            </CButton>\n                          </div>\n                        </CCol>\n                        <CCol>\n                          <div className=\"d-grid col-12 mx-auto\">\n                            <CButton\n                              type=\"button\"\n                              variant=\"outline\"\n                              color=\"secondary\"\n                              onClick={handleNextPage}\n                            >\n                              SIGUIENTE\n                            </CButton>\n                          </div>\n                        </CCol>\n                      </CRow>\n                    </CCardFooter>\n                  </>\n                )}\n                {editing && <ItemForm save={save} cancel={cancel} />}\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </>\n  )\n}\n\nexport default Item\n","import dayjs from 'dayjs'\n\nexport const formatCurrency = (amount) => {\n  return Number.isInteger(amount) && amount >= 0\n    ? new Intl.NumberFormat('es-CO', {\n        style: 'currency',\n        currency: 'COP',\n        maximumFractionDigits: 0,\n      }).format(amount)\n    : amount\n}\n\nexport const formatDate = (dateAsString, format = 'DD-MM-YYYY hh:mm a') => {\n  return dayjs(dateAsString).format(format)\n}\n"],"names":["ENTER_KEYCODE","TAB_KEYCODE","AVAILABLE_BILLS","saveItemCategory","billing","dispatch","_","api","post","status","saveSuccess","getItemCategories","params","searchParams","URLSearchParams","toString","get","length","data","setItemCategories","itemInitialState","name","code","description","price","categoryId","units","measurementUnit","props","useDispatch","itemCategories","useSelector","state","itemGlobal","items","item","codeRegistered","existsByCode","useState","setItem","failedValidations","setFailedValidations","modal","setModal","toggle","useEffect","parse","onChangeField","target","value","existByCode","closeBtn","className","onClick","isValidForm","failedValidationsObj","Object","values","every","validation","save","console","log","fluid","noValidate","style","marginTop","xs","lg","label","type","feedback","invalid","required","onChange","event","feedbackInvalid","options","variant","color","cancel","isOpen","close","id","width","maxWidth","CONSTANTS","searchTerm","setSearchTerm","editing","setEditing","page","setPage","getItems","handlePrevPage","newPage","handleNextPage","onKeyDownCodeField","keyCode","includes","search","trim","placeholder","onKeyDown","map","src","DefaultImg","formatCurrency","size","handleEdit","_id","updateItem","saveItem","amount","Number","isInteger","Intl","NumberFormat","currency","maximumFractionDigits","format","formatDate","dateAsString","dayjs"],"sourceRoot":""}